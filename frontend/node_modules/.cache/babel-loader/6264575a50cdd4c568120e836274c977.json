{"ast":null,"code":"import * as n from \"react\";\nfunction r() {\n  return r = Object.assign || function (n) {\n    for (var r = 1; r < arguments.length; r++) {\n      var t = arguments[r];\n      for (var e in t) Object.prototype.hasOwnProperty.call(t, e) && (n[e] = t[e]);\n    }\n    return n;\n  }, r.apply(this, arguments);\n}\nvar t = [\"children\", \"options\"],\n  e = [\"allowFullScreen\", \"allowTransparency\", \"autoComplete\", \"autoFocus\", \"autoPlay\", \"cellPadding\", \"cellSpacing\", \"charSet\", \"className\", \"classId\", \"colSpan\", \"contentEditable\", \"contextMenu\", \"crossOrigin\", \"encType\", \"formAction\", \"formEncType\", \"formMethod\", \"formNoValidate\", \"formTarget\", \"frameBorder\", \"hrefLang\", \"inputMode\", \"keyParams\", \"keyType\", \"marginHeight\", \"marginWidth\", \"maxLength\", \"mediaGroup\", \"minLength\", \"noValidate\", \"radioGroup\", \"readOnly\", \"rowSpan\", \"spellCheck\", \"srcDoc\", \"srcLang\", \"srcSet\", \"tabIndex\", \"useMap\"].reduce(function (n, r) {\n    return n[r.toLowerCase()] = r, n;\n  }, {\n    for: \"htmlFor\"\n  }),\n  o = {\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    nbsp: \" \",\n    quot: \"“\"\n  },\n  u = [\"style\", \"script\"],\n  a = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n  c = /mailto:/i,\n  i = /\\n{2,}$/,\n  _ = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/,\n  f = /^ *> ?/gm,\n  l = /^ {2,}\\n/,\n  s = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/,\n  d = /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/,\n  p = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n  m = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  g = /^(?:\\n *)*\\n/,\n  v = /\\r\\n?/g,\n  y = /^\\[\\^([^\\]]+)](:.*)\\n/,\n  h = /^\\[\\^([^\\]]+)]/,\n  k = /\\f/g,\n  x = /^\\s*?\\[(x|\\s)\\]/,\n  b = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  S = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n  $ = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i,\n  z = /&([a-zA-Z]+);/g,\n  w = /^<!--[\\s\\S]*?(?:-->)/,\n  A = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n  E = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n  L = /^\\{.*\\}$/,\n  M = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  I = /^<([^ >]+@[^ >]+)>/,\n  O = /^<([^ >]+:\\/[^ >]+)>/,\n  B = /-([a-z])?/gi,\n  R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/,\n  T = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/,\n  j = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  C = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  D = /(\\[|\\])/g,\n  N = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n  Z = /\\t/g,\n  F = /^ *\\| */,\n  P = /(^ *\\||\\| *$)/g,\n  G = / *$/,\n  H = /^ *:-+: *$/,\n  q = /^ *:-+ *$/,\n  U = /^ *-+: *$/,\n  V = /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/,\n  W = /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/,\n  Q = /^==((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/,\n  X = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,\n  J = /^\\\\([^0-9A-Za-z\\s])/,\n  K = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n  Y = /^\\n+/,\n  nn = /^([ \\t]*)/,\n  rn = /\\\\([^\\\\])/g,\n  tn = / *\\n+$/,\n  en = /(?:^|\\n)( *)$/,\n  on = \"(?:\\\\d+\\\\.)\",\n  un = \"(?:[*+-])\";\nfunction an(n) {\n  return \"( *)(\" + (1 === n ? on : un) + \") +\";\n}\nvar cn = an(1),\n  _n = an(2);\nfunction fn(n) {\n  return new RegExp(\"^\" + (1 === n ? cn : _n));\n}\nvar ln = fn(1),\n  sn = fn(2);\nfunction dn(n) {\n  return new RegExp(\"^\" + (1 === n ? cn : _n) + \"[^\\\\n]*(?:\\\\n(?!\\\\1\" + (1 === n ? on : un) + \" )[^\\\\n]*)*(\\\\n|$)\", \"gm\");\n}\nvar pn = dn(1),\n  mn = dn(2);\nfunction gn(n) {\n  var r = 1 === n ? on : un;\n  return new RegExp(\"^( *)(\" + r + \") [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1\" + r + \" (?!\" + r + \" ))\\\\n*|\\\\s*\\\\n*$)\");\n}\nvar vn = gn(1),\n  yn = gn(2);\nfunction hn(n, r) {\n  var t = 1 === r,\n    e = t ? vn : yn,\n    o = t ? pn : mn,\n    u = t ? ln : sn;\n  return {\n    t: function (n, r, t) {\n      var o = en.exec(t);\n      return o && (r.o || !r.u && !r.i) ? e.exec(n = o[1] + n) : null;\n    },\n    _: Nn.HIGH,\n    l: function (n, r, e) {\n      var a = t ? +n[2] : void 0,\n        c = n[0].replace(i, \"\\n\").match(o),\n        _ = !1;\n      return {\n        p: c.map(function (n, t) {\n          var o = u.exec(n)[0].length,\n            a = new RegExp(\"^ {1,\" + o + \"}\", \"gm\"),\n            i = n.replace(a, \"\").replace(u, \"\"),\n            f = t === c.length - 1,\n            l = -1 !== i.indexOf(\"\\n\\n\") || f && _;\n          _ = l;\n          var s,\n            d = e.u,\n            p = e.o;\n          e.o = !0, l ? (e.u = !1, s = i.replace(tn, \"\\n\\n\")) : (e.u = !0, s = i.replace(tn, \"\"));\n          var m = r(s, e);\n          return e.u = d, e.o = p, m;\n        }),\n        m: t,\n        g: a\n      };\n    },\n    v: function (r, t, e) {\n      return n(r.m ? \"ol\" : \"ul\", {\n        key: e.h,\n        start: r.g\n      }, r.p.map(function (r, o) {\n        return n(\"li\", {\n          key: o\n        }, t(r, e));\n      }));\n    }\n  };\n}\nvar kn = /^\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/,\n  xn = /^!\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/,\n  bn = [_, d, p, b, S, w, R, pn, vn, mn, yn],\n  Sn = [].concat(bn, [/^[^\\n]+(?:  \\n|\\n{2,})/, $, E]);\nfunction $n(n) {\n  return n.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\nfunction zn(n) {\n  return U.test(n) ? \"right\" : H.test(n) ? \"center\" : q.test(n) ? \"left\" : null;\n}\nfunction wn(n, r, t) {\n  var e = t.k;\n  t.k = !0;\n  var o = r(n.trim(), t);\n  t.k = e;\n  var u = [[]];\n  return o.forEach(function (n, r) {\n    \"tableSeparator\" === n.type ? 0 !== r && r !== o.length - 1 && u.push([]) : (\"text\" !== n.type || null != o[r + 1] && \"tableSeparator\" !== o[r + 1].type || (n.S = n.S.replace(G, \"\")), u[u.length - 1].push(n));\n  }), u;\n}\nfunction An(n, r, t) {\n  t.u = !0;\n  var e = wn(n[1], r, t),\n    o = n[2].replace(P, \"\").split(\"|\").map(zn),\n    u = function (n, r, t) {\n      return n.trim().split(\"\\n\").map(function (n) {\n        return wn(n, r, t);\n      });\n    }(n[3], r, t);\n  return t.u = !1, {\n    $: o,\n    A: u,\n    L: e,\n    type: \"table\"\n  };\n}\nfunction En(n, r) {\n  return null == n.$[r] ? {} : {\n    textAlign: n.$[r]\n  };\n}\nfunction Ln(n) {\n  return function (r, t) {\n    return t.u ? n.exec(r) : null;\n  };\n}\nfunction Mn(n) {\n  return function (r, t) {\n    return t.u || t.i ? n.exec(r) : null;\n  };\n}\nfunction In(n) {\n  return function (r, t) {\n    return t.u || t.i ? null : n.exec(r);\n  };\n}\nfunction On(n) {\n  return function (r) {\n    return n.exec(r);\n  };\n}\nfunction Bn(n, r, t) {\n  if (r.u || r.i) return null;\n  if (t && !t.endsWith(\"\\n\")) return null;\n  var e = \"\";\n  n.split(\"\\n\").every(function (n) {\n    return !bn.some(function (r) {\n      return r.test(n);\n    }) && (e += n + \"\\n\", n.trim());\n  });\n  var o = e.trimEnd();\n  return \"\" == o ? null : [e, o];\n}\nfunction Rn(n) {\n  try {\n    if (decodeURIComponent(n).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) return null;\n  } catch (n) {\n    return null;\n  }\n  return n;\n}\nfunction Tn(n) {\n  return n.replace(rn, \"$1\");\n}\nfunction jn(n, r, t) {\n  var e = t.u || !1,\n    o = t.i || !1;\n  t.u = !0, t.i = !0;\n  var u = n(r, t);\n  return t.u = e, t.i = o, u;\n}\nfunction Cn(n, r, t) {\n  var e = t.u || !1,\n    o = t.i || !1;\n  t.u = !1, t.i = !0;\n  var u = n(r, t);\n  return t.u = e, t.i = o, u;\n}\nfunction Dn(n, r, t) {\n  return t.u = !1, n(r + \"\\n\\n\", t);\n}\nvar Nn,\n  Zn = function (n, r, t) {\n    return {\n      S: jn(r, n[1], t)\n    };\n  };\nfunction Fn() {\n  return {};\n}\nfunction Pn() {\n  return null;\n}\nfunction Gn() {\n  return [].slice.call(arguments).filter(Boolean).join(\" \");\n}\nfunction Hn(n, r, t) {\n  for (var e = n, o = r.split(\".\"); o.length && void 0 !== (e = e[o[0]]);) o.shift();\n  return e || t;\n}\nfunction qn(n, r) {\n  var t = Hn(r, n);\n  return t ? \"function\" == typeof t || \"object\" == typeof t && \"render\" in t ? t : Hn(r, n + \".component\", n) : n;\n}\nfunction Un(t, i) {\n  void 0 === i && (i = {}), i.overrides = i.overrides || {}, i.slugify = i.slugify || $n, i.namedCodesToUnicode = i.namedCodesToUnicode ? r({}, o, i.namedCodesToUnicode) : o;\n  var P = i.createElement || n.createElement;\n  function G(n, t) {\n    var e = Hn(i.overrides, n + \".props\", {});\n    return P.apply(void 0, [qn(n, i.overrides), r({}, t, e, {\n      className: Gn(null == t ? void 0 : t.className, e.className) || void 0\n    })].concat([].slice.call(arguments, 2)));\n  }\n  function H(r) {\n    var t = !1;\n    i.forceInline ? t = !0 : i.forceBlock || (t = !1 === N.test(r));\n    for (var e = un(on(t ? r : r.trimEnd().replace(Y, \"\") + \"\\n\\n\", {\n      u: t\n    })); \"string\" == typeof e[e.length - 1] && !e[e.length - 1].trim();) e.pop();\n    if (null === i.wrapper) return e;\n    var o,\n      u = i.wrapper || (t ? \"span\" : \"div\");\n    if (e.length > 1 || i.forceWrapper) o = e;else {\n      if (1 === e.length) return \"string\" == typeof (o = e[0]) ? G(\"span\", {\n        key: \"outer\"\n      }, o) : o;\n      o = null;\n    }\n    return n.createElement(u, {\n      key: \"outer\"\n    }, o);\n  }\n  function q(r) {\n    var t = r.match(a);\n    return t ? t.reduce(function (r, t, o) {\n      var u = t.indexOf(\"=\");\n      if (-1 !== u) {\n        var a = function (n) {\n            return -1 !== n.indexOf(\"-\") && null === n.match(A) && (n = n.replace(B, function (n, r) {\n              return r.toUpperCase();\n            })), n;\n          }(t.slice(0, u)).trim(),\n          c = function (n) {\n            var r = n[0];\n            return ('\"' === r || \"'\" === r) && n.length >= 2 && n[n.length - 1] === r ? n.slice(1, -1) : n;\n          }(t.slice(u + 1).trim()),\n          i = e[a] || a,\n          _ = r[i] = function (n, r) {\n            return \"style\" === n ? r.split(/;\\s?/).reduce(function (n, r) {\n              var t = r.slice(0, r.indexOf(\":\"));\n              return n[t.replace(/(-[a-z])/g, function (n) {\n                return n[1].toUpperCase();\n              })] = r.slice(t.length + 1).trim(), n;\n            }, {}) : \"href\" === n ? Rn(r) : (r.match(L) && (r = r.slice(1, r.length - 1)), \"true\" === r || \"false\" !== r && r);\n          }(a, c);\n        \"string\" == typeof _ && ($.test(_) || E.test(_)) && (r[i] = n.cloneElement(H(_.trim()), {\n          key: o\n        }));\n      } else \"style\" !== t && (r[e[t] || t] = !0);\n      return r;\n    }, {}) : null;\n  }\n  var U = [],\n    rn = {},\n    tn = {\n      blockQuote: {\n        t: In(_),\n        _: Nn.HIGH,\n        l: function (n, r, t) {\n          return {\n            S: r(n[0].replace(f, \"\"), t)\n          };\n        },\n        v: function (n, r, t) {\n          return G(\"blockquote\", {\n            key: t.h\n          }, r(n.S, t));\n        }\n      },\n      breakLine: {\n        t: On(l),\n        _: Nn.HIGH,\n        l: Fn,\n        v: function (n, r, t) {\n          return G(\"br\", {\n            key: t.h\n          });\n        }\n      },\n      breakThematic: {\n        t: In(s),\n        _: Nn.HIGH,\n        l: Fn,\n        v: function (n, r, t) {\n          return G(\"hr\", {\n            key: t.h\n          });\n        }\n      },\n      codeBlock: {\n        t: In(p),\n        _: Nn.MAX,\n        l: function (n) {\n          return {\n            S: n[0].replace(/^ {4}/gm, \"\").replace(/\\n+$/, \"\"),\n            M: void 0\n          };\n        },\n        v: function (n, t, e) {\n          return G(\"pre\", {\n            key: e.h\n          }, G(\"code\", r({}, n.I, {\n            className: n.M ? \"lang-\" + n.M : \"\"\n          }), n.S));\n        }\n      },\n      codeFenced: {\n        t: In(d),\n        _: Nn.MAX,\n        l: function (n) {\n          return {\n            I: q(n[3] || \"\"),\n            S: n[4],\n            M: n[2] || void 0,\n            type: \"codeBlock\"\n          };\n        }\n      },\n      codeInline: {\n        t: Mn(m),\n        _: Nn.LOW,\n        l: function (n) {\n          return {\n            S: n[2]\n          };\n        },\n        v: function (n, r, t) {\n          return G(\"code\", {\n            key: t.h\n          }, n.S);\n        }\n      },\n      footnote: {\n        t: In(y),\n        _: Nn.MAX,\n        l: function (n) {\n          return U.push({\n            O: n[2],\n            B: n[1]\n          }), {};\n        },\n        v: Pn\n      },\n      footnoteReference: {\n        t: Ln(h),\n        _: Nn.HIGH,\n        l: function (n) {\n          return {\n            S: n[1],\n            R: \"#\" + i.slugify(n[1])\n          };\n        },\n        v: function (n, r, t) {\n          return G(\"a\", {\n            key: t.h,\n            href: Rn(n.R)\n          }, G(\"sup\", {\n            key: t.h\n          }, n.S));\n        }\n      },\n      gfmTask: {\n        t: Ln(x),\n        _: Nn.HIGH,\n        l: function (n) {\n          return {\n            T: \"x\" === n[1].toLowerCase()\n          };\n        },\n        v: function (n, r, t) {\n          return G(\"input\", {\n            checked: n.T,\n            key: t.h,\n            readOnly: !0,\n            type: \"checkbox\"\n          });\n        }\n      },\n      heading: {\n        t: In(b),\n        _: Nn.HIGH,\n        l: function (n, r, t) {\n          return {\n            S: jn(r, n[2], t),\n            j: i.slugify(n[2]),\n            C: n[1].length\n          };\n        },\n        v: function (n, r, t) {\n          return G(\"h\" + n.C, {\n            id: n.j,\n            key: t.h\n          }, r(n.S, t));\n        }\n      },\n      headingSetext: {\n        t: In(S),\n        _: Nn.MAX,\n        l: function (n, r, t) {\n          return {\n            S: jn(r, n[1], t),\n            C: \"=\" === n[2] ? 1 : 2,\n            type: \"heading\"\n          };\n        }\n      },\n      htmlComment: {\n        t: On(w),\n        _: Nn.HIGH,\n        l: function () {\n          return {};\n        },\n        v: Pn\n      },\n      image: {\n        t: Mn(xn),\n        _: Nn.HIGH,\n        l: function (n) {\n          return {\n            D: n[1],\n            R: Tn(n[2]),\n            N: n[3]\n          };\n        },\n        v: function (n, r, t) {\n          return G(\"img\", {\n            key: t.h,\n            alt: n.D || void 0,\n            title: n.N || void 0,\n            src: Rn(n.R)\n          });\n        }\n      },\n      link: {\n        t: Ln(kn),\n        _: Nn.LOW,\n        l: function (n, r, t) {\n          return {\n            S: Cn(r, n[1], t),\n            R: Tn(n[2]),\n            N: n[3]\n          };\n        },\n        v: function (n, r, t) {\n          return G(\"a\", {\n            key: t.h,\n            href: Rn(n.R),\n            title: n.N\n          }, r(n.S, t));\n        }\n      },\n      linkAngleBraceStyleDetector: {\n        t: Ln(O),\n        _: Nn.MAX,\n        l: function (n) {\n          return {\n            S: [{\n              S: n[1],\n              type: \"text\"\n            }],\n            R: n[1],\n            type: \"link\"\n          };\n        }\n      },\n      linkBareUrlDetector: {\n        t: function (n, r) {\n          return r.Z ? null : Ln(M)(n, r);\n        },\n        _: Nn.MAX,\n        l: function (n) {\n          return {\n            S: [{\n              S: n[1],\n              type: \"text\"\n            }],\n            R: n[1],\n            N: void 0,\n            type: \"link\"\n          };\n        }\n      },\n      linkMailtoDetector: {\n        t: Ln(I),\n        _: Nn.MAX,\n        l: function (n) {\n          var r = n[1],\n            t = n[1];\n          return c.test(t) || (t = \"mailto:\" + t), {\n            S: [{\n              S: r.replace(\"mailto:\", \"\"),\n              type: \"text\"\n            }],\n            R: t,\n            type: \"link\"\n          };\n        }\n      },\n      orderedList: hn(G, 1),\n      unorderedList: hn(G, 2),\n      newlineCoalescer: {\n        t: In(g),\n        _: Nn.LOW,\n        l: Fn,\n        v: function () {\n          return \"\\n\";\n        }\n      },\n      paragraph: {\n        t: Bn,\n        _: Nn.LOW,\n        l: Zn,\n        v: function (n, r, t) {\n          return G(\"p\", {\n            key: t.h\n          }, r(n.S, t));\n        }\n      },\n      ref: {\n        t: Ln(T),\n        _: Nn.MAX,\n        l: function (n) {\n          return rn[n[1]] = {\n            R: n[2],\n            N: n[4]\n          }, {};\n        },\n        v: Pn\n      },\n      refImage: {\n        t: Mn(j),\n        _: Nn.MAX,\n        l: function (n) {\n          return {\n            D: n[1] || void 0,\n            F: n[2]\n          };\n        },\n        v: function (n, r, t) {\n          return G(\"img\", {\n            key: t.h,\n            alt: n.D,\n            src: Rn(rn[n.F].R),\n            title: rn[n.F].N\n          });\n        }\n      },\n      refLink: {\n        t: Ln(C),\n        _: Nn.MAX,\n        l: function (n, r, t) {\n          return {\n            S: r(n[1], t),\n            P: r(n[0].replace(D, \"\\\\$1\"), t),\n            F: n[2]\n          };\n        },\n        v: function (n, r, t) {\n          return rn[n.F] ? G(\"a\", {\n            key: t.h,\n            href: Rn(rn[n.F].R),\n            title: rn[n.F].N\n          }, r(n.S, t)) : G(\"span\", {\n            key: t.h\n          }, r(n.P, t));\n        }\n      },\n      table: {\n        t: In(R),\n        _: Nn.HIGH,\n        l: An,\n        v: function (n, r, t) {\n          return G(\"table\", {\n            key: t.h\n          }, G(\"thead\", null, G(\"tr\", null, n.L.map(function (e, o) {\n            return G(\"th\", {\n              key: o,\n              style: En(n, o)\n            }, r(e, t));\n          }))), G(\"tbody\", null, n.A.map(function (e, o) {\n            return G(\"tr\", {\n              key: o\n            }, e.map(function (e, o) {\n              return G(\"td\", {\n                key: o,\n                style: En(n, o)\n              }, r(e, t));\n            }));\n          })));\n        }\n      },\n      tableSeparator: {\n        t: function (n, r) {\n          return r.k ? F.exec(n) : null;\n        },\n        _: Nn.HIGH,\n        l: function () {\n          return {\n            type: \"tableSeparator\"\n          };\n        },\n        v: function () {\n          return \" | \";\n        }\n      },\n      text: {\n        t: On(K),\n        _: Nn.MIN,\n        l: function (n) {\n          return {\n            S: n[0].replace(z, function (n, r) {\n              return i.namedCodesToUnicode[r] ? i.namedCodesToUnicode[r] : n;\n            })\n          };\n        },\n        v: function (n) {\n          return n.S;\n        }\n      },\n      textBolded: {\n        t: Mn(V),\n        _: Nn.MED,\n        l: function (n, r, t) {\n          return {\n            S: r(n[2], t)\n          };\n        },\n        v: function (n, r, t) {\n          return G(\"strong\", {\n            key: t.h\n          }, r(n.S, t));\n        }\n      },\n      textEmphasized: {\n        t: Mn(W),\n        _: Nn.LOW,\n        l: function (n, r, t) {\n          return {\n            S: r(n[2], t)\n          };\n        },\n        v: function (n, r, t) {\n          return G(\"em\", {\n            key: t.h\n          }, r(n.S, t));\n        }\n      },\n      textEscaped: {\n        t: Mn(J),\n        _: Nn.HIGH,\n        l: function (n) {\n          return {\n            S: n[1],\n            type: \"text\"\n          };\n        }\n      },\n      textMarked: {\n        t: Mn(Q),\n        _: Nn.LOW,\n        l: Zn,\n        v: function (n, r, t) {\n          return G(\"mark\", {\n            key: t.h\n          }, r(n.S, t));\n        }\n      },\n      textStrikethroughed: {\n        t: Mn(X),\n        _: Nn.LOW,\n        l: Zn,\n        v: function (n, r, t) {\n          return G(\"del\", {\n            key: t.h\n          }, r(n.S, t));\n        }\n      }\n    };\n  !0 !== i.disableParsingRawHTML && (tn.htmlBlock = {\n    t: On($),\n    _: Nn.HIGH,\n    l: function (n, r, t) {\n      var e,\n        o = n[3].match(nn),\n        a = new RegExp(\"^\" + o[1], \"gm\"),\n        c = n[3].replace(a, \"\"),\n        i = (e = c, Sn.some(function (n) {\n          return n.test(e);\n        }) ? Dn : jn),\n        _ = n[1].toLowerCase(),\n        f = -1 !== u.indexOf(_);\n      t.Z = t.Z || \"a\" === _;\n      var l = f ? n[3] : i(r, c, t);\n      return t.Z = !1, {\n        I: q(n[2]),\n        S: l,\n        G: f,\n        H: f ? _ : n[1]\n      };\n    },\n    v: function (n, t, e) {\n      return G(n.H, r({\n        key: e.h\n      }, n.I), n.G ? n.S : t(n.S, e));\n    }\n  }, tn.htmlSelfClosing = {\n    t: On(E),\n    _: Nn.HIGH,\n    l: function (n) {\n      return {\n        I: q(n[2] || \"\"),\n        H: n[1]\n      };\n    },\n    v: function (n, t, e) {\n      return G(n.H, r({}, n.I, {\n        key: e.h\n      }));\n    }\n  });\n  var en,\n    on = function (n) {\n      var r = Object.keys(n);\n      function t(e, o) {\n        for (var u = [], a = \"\"; e;) for (var c = 0; c < r.length;) {\n          var i = r[c],\n            _ = n[i],\n            f = _.t(e, o, a);\n          if (f) {\n            var l = f[0];\n            e = e.substring(l.length);\n            var s = _.l(f, t, o);\n            null == s.type && (s.type = i), u.push(s), a = l;\n            break;\n          }\n          c++;\n        }\n        return u;\n      }\n      return r.sort(function (r, t) {\n        var e = n[r]._,\n          o = n[t]._;\n        return e !== o ? e - o : r < t ? -1 : 1;\n      }), function (n, r) {\n        return t(function (n) {\n          return n.replace(v, \"\\n\").replace(k, \"\").replace(Z, \"    \");\n        }(n), r);\n      };\n    }(tn),\n    un = (en = function (n) {\n      return function (r, t, e) {\n        return n[r.type].v(r, t, e);\n      };\n    }(tn), function n(r, t) {\n      if (void 0 === t && (t = {}), Array.isArray(r)) {\n        for (var e = t.h, o = [], u = !1, a = 0; a < r.length; a++) {\n          t.h = a;\n          var c = n(r[a], t),\n            i = \"string\" == typeof c;\n          i && u ? o[o.length - 1] += c : null !== c && o.push(c), u = i;\n        }\n        return t.h = e, o;\n      }\n      return en(r, n, t);\n    }),\n    an = H(t);\n  return U.length ? G(\"div\", null, an, G(\"footer\", {\n    key: \"footer\"\n  }, U.map(function (n) {\n    return G(\"div\", {\n      id: i.slugify(n.B),\n      key: n.B\n    }, n.B, un(on(n.O, {\n      u: !0\n    })));\n  }))) : an;\n}\n!function (n) {\n  n[n.MAX = 0] = \"MAX\", n[n.HIGH = 1] = \"HIGH\", n[n.MED = 2] = \"MED\", n[n.LOW = 3] = \"LOW\", n[n.MIN = 4] = \"MIN\";\n}(Nn || (Nn = {}));\nexport default function (r) {\n  var e = r.children,\n    o = r.options,\n    u = function (n, r) {\n      if (null == n) return {};\n      var t,\n        e,\n        o = {},\n        u = Object.keys(n);\n      for (e = 0; e < u.length; e++) r.indexOf(t = u[e]) >= 0 || (o[t] = n[t]);\n      return o;\n    }(r, t);\n  return n.cloneElement(Un(e, o), u);\n}\nexport { Un as compiler };","map":{"version":3,"names":["e","reduce","n","r","toLowerCase","for","o","amp","apos","gt","lt","nbsp","quot","u","a","c","i","_","f","l","s","d","p","m","g","v","y","h","k","x","b","S","$","z","w","A","E","L","M","I","O","B","R","T","j","C","D","N","Z","F","P","G","H","q","U","V","W","Q","X","J","K","Y","nn","rn","tn","en","on","un","an","cn","_n","fn","RegExp","ln","sn","dn","pn","mn","gn","vn","yn","hn","t","exec","Nn","HIGH","replace","match","map","length","indexOf","key","start","kn","xn","bn","Sn","concat","$n","zn","test","wn","trim","forEach","type","push","An","split","En","textAlign","Ln","Mn","In","On","Bn","endsWith","every","some","trimEnd","Rn","decodeURIComponent","Tn","jn","Cn","Dn","Zn","parseCaptureInline","Fn","Pn","Gn","slice","call","arguments","filter","Boolean","join","Hn","shift","qn","Un","overrides","slugify","namedCodesToUnicode","createElement","apply","className","forceInline","forceBlock","pop","wrapper","forceWrapper","toUpperCase","cloneElement","blockQuote","breakLine","breakThematic","codeBlock","MAX","codeFenced","codeInline","LOW","footnote","footnoteReference","href","gfmTask","checked","readOnly","heading","id","headingSetext","htmlComment","image","alt","title","src","link","linkAngleBraceStyleDetector","linkBareUrlDetector","_match","linkMailtoDetector","orderedList","unorderedList","newlineCoalescer","paragraph","ref","refImage","refLink","table","style","tableSeparator","_parse","text","MIN","textBolded","MED","textEmphasized","textEscaped","textMarked","textStrikethroughed","disableParsingRawHTML","htmlBlock","htmlSelfClosing","Object","keys","substring","sort","Array","isArray","children","options","compiler"],"sources":["../index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome and extensible\n * parsing infra... without it, half of the optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    _inAnchor?: boolean\n    _inline?: boolean\n    _inTable?: boolean\n    _key?: React.Key\n    _list?: boolean\n    _simple?: boolean\n  }\n\n  export type ParserResult = {\n    [key: string]: any\n    type?: string\n  }\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult,\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: Priority\n    _parse: MarkdownToJSX.Parser<ParserOutput>\n    _react?: (\n      node: ParserOutput,\n      output: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [key: string]: Rule\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => JSX.Element\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n  }>\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^( *>[^\\n]+(\\n[^\\n]+)*\\n*)+\\n{2,}/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:.*)\\n/\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)\\/{0}>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?([^>]*)\\/{0}>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1)[\\s\\S])*?)<\\/\\1>\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-zA-Z]+);/g\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(.*\\|?.*)\\n *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*)\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_SEPARATOR_R = /^ *\\| */\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CELL_END_TRIM = / *$/\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\nconst TEXT_BOLD_R =\n  /^([*_])\\1((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1\\1(?!\\1)/\nconst TEXT_EMPHASIZED_R =\n  /^([*_])((?:\\[.*?\\][([].*?[)\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\\1(?!\\1|\\w)/\nconst TEXT_MARKED_R = /^==((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)==/\nconst TEXT_STRIKETHROUGHED_R = /^~~((?:\\[.*?\\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(h: any, type: LIST_TYPE) {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    _match(source, state, prevCapture) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n      const isListBlock = state._list || (!state._inline && !state._simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    _order: Priority.HIGH,\n    _parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state._list to true, and state._inline depending\n        // on our list's looseness.\n        const oldStateInline = state._inline\n        const oldStateList = state._list\n        state._list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state._inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state._inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state._inline = oldStateInline\n        state._list = oldStateList\n\n        return result\n      })\n\n      return {\n        _items: itemContent,\n        _ordered: ordered,\n        _start: start,\n      }\n    },\n    _react(node, output, state) {\n      const Tag = node._ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag key={state._key} start={node._start}>\n          {node._items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  } as MarkdownToJSX.Rule<{\n    _items: MarkdownToJSX.ParserResult[]\n    _ordered: boolean\n    _start?: number\n  }>\n}\n\nconst LINK_R = /^\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\nconst IMAGE_R = /^!\\[([^\\]]*)]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nfunction slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const prevInTable = state._inTable\n  state._inTable = true\n  const tableRow = parse(source.trim(), state)\n  state._inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === 'tableSeparator') {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === 'text' &&\n        (tableRow[i + 1] == null || tableRow[i + 1].type === 'tableSeparator')\n      ) {\n        node._content = node._content.replace(TABLE_CELL_END_TRIM, '')\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  state._inline = true\n  const header = parseTableRow(capture[1], parse, state)\n  const align = parseTableAlign(capture[2])\n  const cells = parseTableCells(capture[3], parse, state)\n  state._inline = false\n\n  return {\n    _align: align,\n    _cells: cells,\n    _header: header,\n    type: 'table',\n  }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node._align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node._align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type]._order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA]._order\n    let orderB = rules[typeB]._order\n\n    // First sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n\n      // Then based on increasing unicode lexicographic ordering\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule._match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule._parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state._inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state._inline || state._simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state._inline || state._simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction reactFor(outputFunc) {\n  return function nestedReactOutput(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state._key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state._key = i\n\n        const nodeOut = nestedReactOutput(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state._key = oldKey\n\n      return result\n    }\n\n    return outputFunc(ast, nestedReactOutput, state)\n  }\n}\n\nfunction sanitizeUrl(url: string): string | null {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = true\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  content: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  const isCurrentlyInline = state._inline || false\n  const isCurrentlySimple = state._simple || false\n  state._inline = false\n  state._simple = true\n  const result = parse(content, state)\n  state._inline = isCurrentlyInline\n  state._simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  content,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult {\n  state._inline = false\n  return parse(content + '\\n\\n', state)\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<\n  ReturnType<typeof parseInline>\n> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    _content: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction ruleOutput(rules: MarkdownToJSX.Rules) {\n  return function nestedRuleOutput(\n    ast: MarkdownToJSX.ParserResult,\n    outputFunc: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    return rules[ast.type]._react(ast, outputFunc, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nenum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\nexport function compiler(\n  markdown: string,\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    let _inline = false\n\n    if (options.forceInline) {\n      _inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      _inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        _inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          _inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (_inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          key,\n          value\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = React.cloneElement(compile(normalizedValue.trim()), {\n            key: index,\n          })\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { _footnote: string; _identifier: string }[] = []\n  const refs: { [key: string]: { _target: string; _title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom h() JSX pragma;\n   * this allows the override functionality to be automatically applied\n   */\n  const rules: MarkdownToJSX.Rules = {\n    blockQuote: {\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          _content: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <blockquote key={state._key}>\n            {output(node._content, state)}\n          </blockquote>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _content: MarkdownToJSX.ParserResult }>,\n\n    breakLine: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <br key={state._key} />\n      },\n    },\n\n    breakThematic: {\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _react(_, __, state) {\n        return <hr key={state._key} />\n      },\n    },\n\n    codeBlock: {\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n          _lang: undefined,\n        }\n      },\n\n      _react(node, output, state) {\n        return (\n          <pre key={state._key}>\n            <code\n              {...node._attrs}\n              className={node._lang ? `lang-${node._lang}` : ''}\n            >\n              {node._content}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs?: ReturnType<typeof attrStringToMap>\n      _content: string\n      _lang?: string\n    }>,\n\n    codeFenced: {\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          _attrs: attrStringToMap(capture[3] || ''),\n          _content: capture[4],\n          _lang: capture[2] || undefined,\n          type: 'codeBlock',\n        }\n      },\n    },\n\n    codeInline: {\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return <code key={state._key}>{node._content}</code>\n      },\n    } as MarkdownToJSX.Rule<{ _content: string }>,\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    footnote: {\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          _footnote: capture[2],\n          _identifier: capture[1],\n        })\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    footnoteReference: {\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          _content: capture[1],\n          _target: `#${options.slugify(capture[1])}`,\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a key={state._key} href={sanitizeUrl(node._target)}>\n            <sup key={state._key}>{node._content}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _content: string; _target: string }>,\n\n    gfmTask: {\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <input\n            checked={node._completed}\n            key={state._key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _completed: boolean }>,\n\n    heading: {\n      _match: blockRegex(HEADING_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseInline(parse, capture[2], state),\n          _id: options.slugify(capture[2]),\n          _level: capture[1].length,\n        }\n      },\n      _react(node, output, state) {\n        return h(\n          `h${node._level}`,\n          { id: node._id, key: state._key },\n          output(node._content, state)\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _id: string\n      _level: 1 | 2 | 3 | 4 | 5 | 6\n      _tag: MarkdownToJSX.HTMLTags\n    }>,\n\n    headingSetext: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseInline(parse, capture[1], state),\n          _level: capture[2] === '=' ? 1 : 2,\n          type: 'heading',\n        }\n      },\n    },\n\n    htmlComment: {\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    image: {\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _alt: capture[1],\n          _target: unescapeUrl(capture[2]),\n          _title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node._alt || undefined}\n            title={node._title || undefined}\n            src={sanitizeUrl(node._target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _alt?: string\n      _target: string\n      _title?: string\n    }>,\n\n    link: {\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          _content: parseSimpleInline(parse, capture[1], state),\n          _target: unescapeUrl(capture[2]),\n          _title: capture[3],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <a\n            key={state._key}\n            href={sanitizeUrl(node._target)}\n            title={node._title}\n          >\n            {output(node._content, state)}\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _target: string\n      _title?: string\n    }>,\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    linkAngleBraceStyleDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: [\n            {\n              _content: capture[1],\n              type: 'text',\n            },\n          ],\n          _target: capture[1],\n          type: 'link',\n        }\n      },\n    },\n\n    linkBareUrlDetector: {\n      _match: (source, state) => {\n        if (state._inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: [\n            {\n              _content: capture[1],\n              type: 'text',\n            },\n          ],\n          _target: capture[1],\n          _title: undefined,\n          type: 'link',\n        }\n      },\n    },\n\n    linkMailtoDetector: {\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          _content: [\n            {\n              _content: address.replace('mailto:', ''),\n              type: 'text',\n            },\n          ],\n          _target: target,\n          type: 'link',\n        }\n      },\n    },\n\n    orderedList: generateListRule(h, ORDERED),\n    unorderedList: generateListRule(h, UNORDERED),\n\n    newlineCoalescer: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _react(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    paragraph: {\n      _match: matchParagraph,\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <p key={state._key}>{output(node._content, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    ref: {\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          _target: capture[2],\n          _title: capture[4],\n        }\n\n        return {}\n      },\n      _react: renderNothing,\n    },\n\n    refImage: {\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          _alt: capture[1] || undefined,\n          _ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          <img\n            key={state._key}\n            alt={node._alt}\n            src={sanitizeUrl(refs[node._ref]._target)}\n            title={refs[node._ref]._title}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ _alt?: string; _ref: string }>,\n\n    refLink: {\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          _content: parse(capture[1], state),\n          _fallbackContent: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          _ref: capture[2],\n        }\n      },\n      _react(node, output, state) {\n        return refs[node._ref] ? (\n          <a\n            key={state._key}\n            href={sanitizeUrl(refs[node._ref]._target)}\n            title={refs[node._ref]._title}\n          >\n            {output(node._content, state)}\n          </a>\n        ) : (\n          <span key={state._key}>{output(node._fallbackContent, state)}</span>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _content: MarkdownToJSX.ParserResult\n      _fallbackContent: MarkdownToJSX.ParserResult\n      _ref: string\n    }>,\n\n    table: {\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _react(node, output, state) {\n        return (\n          <table key={state._key}>\n            <thead>\n              <tr>\n                {node._header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(node, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {node._cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(node, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseTable>>,\n\n    tableSeparator: {\n      _match: function (source, state) {\n        if (!state._inTable) {\n          return null\n        }\n        return TABLE_SEPARATOR_R.exec(source)\n      },\n      _order: Priority.HIGH,\n      _parse: function () {\n        return { type: 'tableSeparator' }\n      },\n      // These shouldn't be reached, but in case they are, be reasonable:\n      _react() {\n        return ' | '\n      },\n    },\n\n    text: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      _react(node /*, output, state*/) {\n        return node._content\n      },\n    } as MarkdownToJSX.Rule<{ _content: string }>,\n\n    textBolded: {\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          _content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <strong key={state._key}>{output(node._content, state)}</strong>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEmphasized: {\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          _content: parse(capture[2], state),\n        }\n      },\n      _react(node, output, state) {\n        return <em key={state._key}>{output(node._content, state)}</em>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<MarkdownToJSX.NestedParser>>,\n\n    textEscaped: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _content: capture[1],\n          type: 'text',\n        }\n      },\n    },\n\n    textMarked: {\n      _match: simpleInlineRegex(TEXT_MARKED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <mark key={state._key}>{output(node._content, state)}</mark>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    textStrikethroughed: {\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _react(node, output, state) {\n        return <del key={state._key}>{output(node._content, state)}</del>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { _match: match, _parse: parse } = rules[key]\n\n  //   rules[key]._match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key]._parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML !== true) {\n    rules.htmlBlock = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        state._inAnchor = state._inAnchor || tagName === 'a'\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        const content = noInnerParse\n          ? capture[3]\n          : parseFunc(parse, trimmed, state)\n\n        state._inAnchor = false\n\n        return {\n          _attrs: attrStringToMap(capture[2]),\n          _content: content,\n          _noInnerParse: noInnerParse,\n          _tag: noInnerParse ? tagName : capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return (\n          // @ts-ignore\n          <node._tag key={state._key} {...node._attrs}>\n            {node._noInnerParse\n              ? (node._content as string)\n              : output(node._content as MarkdownToJSX.ParserResult, state)}\n          </node._tag>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs: ReturnType<typeof attrStringToMap>\n      _content: string | ReturnType<MarkdownToJSX.NestedParser>\n      _noInnerParse: Boolean\n      _tag: string\n    }>\n\n    rules.htmlSelfClosing = {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          _attrs: attrStringToMap(capture[2] || ''),\n          _tag: capture[1],\n        }\n      },\n      _react(node, output, state) {\n        return <node._tag {...node._attrs} key={state._key} />\n      },\n    } as MarkdownToJSX.Rule<{\n      _attrs: ReturnType<typeof attrStringToMap>\n      _tag: string\n    }>\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(ruleOutput(rules))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def._identifier)} key={def._identifier}>\n                {def._identifier}\n                {emitter(parser(def._footnote, { _inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children, options, ...props }) => {\n  return React.cloneElement(\n    compiler(children, options),\n    props as JSX.IntrinsicAttributes\n  )\n}\n\nexport default Markdown\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}